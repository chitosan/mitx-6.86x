import os
import sys
import time
import traceback
import numpy as np
import linear_regression
import softmax
import svm
import softmax
import features
import kernel

# --------------------------------------
# Closed form test
# --------------------------------------

X= np.array(
[[0.87701218, 0.42093429, 0.97185588],
 [0.6583796,  0.18051088, 0.68467793],
 [0.31718118, 0.30474825, 0.95940335],
 [0.07106508, 0.25240253, 0.18049655],
 [0.95576132, 0.0182025 , 0.7973699 ],
 [0.98980585, 0.68735469, 0.60886186],
 [0.55733841, 0.46858122, 0.61498699],
 [0.12908668, 0.15850902, 0.56931464],
 [0.86172144, 0.32037056, 0.42375396],
 [0.95950363, 0.97056153, 0.50979477],
 [0.60904147, 0.51626528, 0.58265506],
 [0.27722786, 0.96943083, 0.24753933],
 [0.52936449, 0.63825071, 0.54704727],
 [0.11992352, 0.65771793, 0.85810275]])
Y = np.array(
[0.02378527, 0.65696892, 0.26692622, 0.52236223, 0.84960709,
 0.37140001, 0.13683566, 0.52495708, 0.11110893, 0.22951902,
 0.26149178, 0.67276496, 0.69892109, 0.25469655])
lambda_factor =  0.6718691048205935
exp_res = np.array([0.12969735, 0.17941532, 0.28087335])
r = linear_regression.closed_form(X, Y, lambda_factor)
print(exp_res)
print(r)
if (np.allclose(r, exp_res)):
    print("PASS. Both arrays are the same.")
else:
    print("FAIL: The arrays are not the same")

X = np.array(
[[1,62,82,60,17,62,2,75,71,30,21],
 [1,78,91,94,50,88,19,88,9,96,38],
 [1,28,99,27,79,39,88,26,68,15,15],
 [1,60,58,95,63,56,37,57,48,24,49],
 [1,91,58,51,3,84,49,83,46,38,62],
 [1,68,55,35,1,76,47,5,75,90,82],
 [1,1,81,92,90,3,7,89,17,61,52],
 [1,37,75,34,30,87,38,31,58,79,79],
 [1,46,71,59,27,11,18,97,62,14,76],
 [1,45,57,43,46,57,31,86,5,29,32]])
theta = np.array(
[[0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0,0,0,0,0]])
Y = np.array(range(np.shape(X)[0]))
lambda_factor = 0.0001
temp_parameter = 1.0
J = softmax.compute_cost_function(X, Y, theta, lambda_factor, temp_parameter)
print(J)